Private Declare Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal pCaller As Long, _
ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
    

Public Function doTrial1()

    vAttempt = MsgBox(ActiveSheet.Range("B1:J1").Cells(1, 5).Address)

End Function

'This function is to find the rightmost filled cells
Public Function doFindLastCol(ByVal vWS1 As Worksheet, ByVal vStart As String) As Long

    Dim vTemp As Long, vCol As Long

    vTemp = vWS1.Range(vStart).End(xlToRight).Column
    a = vWS1.Range(vStart).Column

    Do While vTemp < 16384
        vCol = vTemp
        vTemp = vWS1.Range(vStart).Offset(0, vCol - a).End(xlToRight).Column
        a = vCol
    Loop

    doFindLastCol = a

End Function

Public Function doFindLastRow(ByVal vWS1 As Worksheet, ByVal vStart As String) As Long

    Dim vTemp As Long, vRow As Long

    vTemp = vWS1.Range(vStart).End(xlDown).Row
    a = vWS1.Range(vStart).Row
    vRow = 1

    Do While vTemp < 1048576
        vRow = vTemp
        vTemp = vWS1.Range(vStart).Offset(vRow - a, 0).End(xlDown).Row
        
    Loop

    doFindLastRow = vRow

End Function


Public Function doFindCell(ByVal vWhatToFind As String, ByVal vRng As Range) As Variant

    Dim vRow, vCol As Long
    Dim vTemp() As Variant

    vRow = vRng.Rows.Count
    vCol = vRng.Columns.Count
    ReDim vTemp(0)
    vTemp(0) = "Empty"

    i = 0
    For iRow = 1 To vRow
        For iCol = 1 To vCol
            If vRng.Cells(iRow, iCol).Value = vWhatToFind Then
                i = i + 1
                ReDim Preserve vTemp(i)
                vTemp(i) = vRng.Cells(iRow, iCol).Address
            End If
        Next iCol
    Next iRow

    doFindCell = vTemp

End Function

Public Function doFindHeaderInRng(ByVal vWhatToFind As String, ByVal vRng As Range) As Long

    Dim vCol As Long
    Dim vTemp As Long
    Dim vFound As Boolean

    vTemp = 0
    vCol = vRng.Columns.Count

    i = 0

    vFound = False
    For iCol = 1 To vCol
        If vRng.Cells(1, iCol).Value = vWhatToFind And vFound = False Then
            vTemp = iCol
            vFound = True
        End If
    Next iCol

    doFindHeaderInRng = vTemp

End Function

Public Function doCountIF2DArr(ByVal vWhatToFind As String, ByVal vArr As Variant) As Long

    Dim vRow, vCol, vCount As Long
    vRow = UBound(vArr, 1)
    vCol = UBound(vArr, 2)


    vCount = 0
    For i = 0 To vRow
        For j = 0 To vCol
            If vArr(i, j) = vWhatToFind Then
                vCount = vCount + 1
            End If
        Next j
    Next i

    doCountIF2DArr = vCount

End Function



Public Function doCopyFiles(ByVal vFileLoc As String, ByVal vDestination As String)

    Dim vURL As String
    Dim vFile As FileSystemObject 'This is for checking local folder location and do the manipulation
    Dim vHTTP As XMLHTTP60 'This is to obtain updated xlam file for update
    Dim vStream As ADODB.Stream
    Dim vTemp As Workbook

    vURL = vFileLoc
    Set vHTTP = New XMLHTTP60
    Set vStream = New ADODB.Stream

    vHTTP.Open "GET", vFileLoc, False
    vHTTP.send

    Do While vHTTP.readyState <> 4
        DoEvents
    Loop

    vresp = vHTTP.responseBody

    vff = FreeFile
    If Dir(vDestination) <> "" Then
        Kill vDestination
    End If

    Open vDestination For Binary As #vff
    Put #vff, , vresp
    Close #vff



    'vStream.Open
    'vStream.Type = 1
    'vStream.Write vHTTP.responseBody

    'vStream.SaveToFile vDestination, 2
    'vStream.Close

    'Workbooks.Open (vDestination)
    'Set doCopyFiles = ActiveWorkbook

End Function


'Function below is not usefull
Function doDownloadFileFromWeb(ByVal strURL As String, ByVal strSavePath As String)

    'strSavePath includes filename
    On Error GoTo Handler01

    Dim vFile As FileSystemObject

    Set vFile = New FileSystemObject

    URLDownloadToFile 0, strURL, strSavePath, 0, 0
    Do While vFile.FileExists(strSavePath) = False
        DoEvents
    Loop

    Exit Function
        
    Handler01:
    MsgBox "Failed to access the server to obtain needed file!", vbOKOnly, "Error"
    End
    
End Function


Function doDownloadExcelFile(ByVal strURL As String, ByVal strSavePath As String)

    ' strSavePath includes filename
    On Error GoTo Handler01

    Dim vFile As FileSystemObject
    Dim vXL As Excel.Application
    Dim vWB1 As Workbook

    Set vFile = New FileSystemObject
    Set vXL = New Excel.Application

    vXL.Visible = False
    vXL.DisplayAlerts = False

    Set vWB1 = vXL.Workbooks.Open(strURL)
    vWB1.SaveAs strSavePath

    Do While vFile.FileExists(strSavePath) = False
        DoEvents
    Loop

    vWB1.Close SaveChanges:=True
    vXL.Visible = True
    vXL.DisplayAlerts = True
    Set vXL = Nothing

    Exit Function
        
    Handler01:
    MsgBox "Failed to access the server to obtain needed file!", vbOKOnly, "Error"
    End
        
End Function


Public Function doDownloadTemplate()

    Dim vLoc, vFName, vSource, vRename As String
    Dim vFile As FileSystemObject
    Dim vDialog As FileDialog

    Application.DisplayAlerts = False

    Set vFile = New FileSystemObject
    vLoc = "C:\Users\" & Environ("username") & "\Documents\xJournal_Templates\"
    If vFile.FolderExists(vLoc) = False Then
        MkDir vLoc
    End If

    vFName = "Journal Template.xlsx" '<<<< change this filename for real live version

    vSource = "https://rtedja-my.sharepoint.com/personal/rtedjasukmana_rtedja_onmicrosoft_com/Documents/Shared Resources/IFRC/" & vFName

    If vFile.FileExists(vLoc & vFName) = True Then
        Kill vLoc & vFName
        doDownloadExcelFile vSource, vLoc & vFName
        'Do While vFile.FileExists(vLoc & vFName) = True
        '    DoEvents
        'Loop
    Else:
        doDownloadExcelFile vSource, vLoc & vFName
        'Do While vFile.FileExists(vLoc & vFName) = True
        '    DoEvents
        'Loop
    End If



    Set vDialog = Application.FileDialog(msoFileDialogSaveAs)
    With vDialog
        .ButtonName = "Save"
        .AllowMultiSelect = False
        .InitialFileName = "C:\Users\" & Environ("username") & "\Documents\" & "xPayroll Journal " & Format(Now(), ("MMYY"))
        
        If .Show <> 0 Then
            vRename = .SelectedItems(1)
            FileCopy vLoc & vFName, vRename
        Else:
            MsgBox "Saving file operation is cancelled by user.", vbOKOnly, "Information"
            End
        End If
    End With

    Application.DisplayAlerts = True

    vTemplateFileName = vRename
    End Function

    Function doShowVersion()

    MsgBox "The current version of the add-ins app is " & vVersion & ".", vbOKOnly, "Information"

End Function

Public Function fn_ConnectString(ByVal FileType As String, ByVal dataSource As String, ByVal passwords As String) As String
    If IsNull(dataSource) = False Then
        Dim Types As String
        Select Case FileType
            Case "Excel"
                fn_ConnectString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & dataSource & _
                                "Extended Properties =""Excel 12.0 Xml;HDR=YES"";"
            Case "Access"
                If IsNull(passwords) = False Then
                    fn_ConnectString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & dataSource & ";" & _
                                    "Jet OLEDB:Database Password=" & passwords & ";"
                Else: fn_ConnectString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & dataSource & ";" & _
                                    "Persist Security Info=False;"
                End If
            Case "ExcelMacro"
                fn_ConnectString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & dataSource & _
                                "; Extended Properties=""Excel 12.0 Macro;HDR=YES"";"
            Case "Sharepoint"
                fn_ConnectString = "Provider=Microsoft.Office.List.OLEDB.2.0;Data Source=" & dataSource & "; ApplicationName=Excel;Version=12.0.0.0"
            Case "Sharepoint2"
                fn_ConnectString = "Provider=Microsoft.ACE.OLEDB.12.0;WSS;IMEX=2;RetrieveIds=Yes;DATABASE=" & dataSource & ";LIST=" & passwords & ";"
        End Select
    End If
End Function

Public Function fn_ADRS(ByVal FileType As String, ByVal dataSource As String, ByVal passwords As String, ByVal sqlState As String) As ADODB.Recordset
    Dim dbConn As ADODB.Connection
    Set dbConn = New ADODB.Connection

    'On Error GoTo Handler01:
    dbConn.Mode = adModeReadWrite
    dbConn.Open fn_ConnectString(FileType, dataSource, passwords)
    Set fn_ADRS = New ADODB.Recordset
    fn_ADRS.Open sqlState, dbConn, adLockOptimistic, adLockOptimistic

    Exit Function

    Handler01:
    Set fn_ADRS = Nothing

    'Example for SharePoint list: fx_masterRS("SELECT * FROM XIA_T_MATCHED", "{59D43878-3BEB-4D8C-9FF9-8C69636EAB0F}")
    'fn_ADRS("Sharepoint2", srcFile, GUID, sqlString)
    ' sqlString = "SELECT * FROM XIA_T_MATCHED" while GUID = "{59D43878-3BEB-4D8C-9FF9-8C69636EAB0F}"

End Function

Public Function fn_ADRS_Connect(ByVal FileType As String, ByVal dataSource As String, ByVal passwords As String) As ADODB.Connection
    Dim dbConn As ADODB.Connection
    Set dbConn = New ADODB.Connection

    On Error GoTo Handler01:
    dbConn.Open fn_ConnectString(FileType, dataSource, passwords)
    Set fn_ADRS_Connect = New ADODB.Connection
    Set fn_ADRS_Connect = dbConn

    Exit Function

    Handler01:
    On Error Resume Next
    Set fn_ADRS_Connect = Nothing

End Function
